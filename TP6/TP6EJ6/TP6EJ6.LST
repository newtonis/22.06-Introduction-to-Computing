################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              20/Sep/16  08:29:13    #
#                                                                              #
#       Source   =   ej6tp6.msa                                                #
#       List     =   ej6tp6.lst                                                #
#       Object   =   ej6tp6.r07                                                #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                   p68h11
    2                 
    3  2000           MAIN_AREA       equ     $2000
    4  2500           SUB_AREA        equ     $2500
    5  3000           TEST_AREA       equ     $3000
    6  3500           STACK_AREA      equ     $3500
    7  3900           RESULT          equ     $3900
    8                 
    9  2500                   org     SUB_AREA        
   10                 
   11  2500           get_aver        equ     *       ; subrutina que obtiene promedio de las temperaturas
   12                 
   13  2500 30                tsx                     ; cargo en x el frame pointer
   14  2501 1AEE02            ldy     2,X             ; cargo el puntero que dice donde debo empezar a leer (primer parametro)
   15                 
   16  2504 8600              ldaa    #$0             ; aqui se almacena la cantidad de temperaturas
   17  2506 CE0000            ldx     #$0             ; aqui tambien se almacena esa cantidad
   18                 
   19  2509 18E600    inicio  ldab    0,Y             ; cargo temperatura
   20  250C C1FF              cmpb    #$FF
   21  250E 2708              beq     fin
   22                         
   23  2510 5C                incb                    ; la incremento en 1
   24  2511 37                pshb                    ;aqui cargamos en variables temprables del stack si la temperatura no es la final
   25  2512 1808              iny
   26  2514 08                inx
   27  2515 4C                inca                    ; incrementamos cantidad de temperaturas y puntero Y de la posicion a leer
   28                 
   29  2516 20F1              bra     inicio
   30  2518           fin
   31                         
   32                 *ahora procedemos a sumar todas las memorias temporales creadas
   33                 
   34  2518 18CE0000          ldy     #$00            ; aqui se almacenara la suma
   35                 
   36  251C 33        inicio2 pulb                    ; cargamos memoria a sumar
   37  251D 183A              aby                     ; la sumamos al lo quie hay en el registro B
   38  251F 4A                deca                    ; decrementamos la cantidad de temperaturas leidas (quedan menos)
   39  2520 26FA              bne     inicio2         ; si quedan temepraturas por leer
   40                 
   41                 *ahora procedemos a dividir el contenido de y por la cantidad de temperaturas
   42  2522 183C              pshy                    ; cargamos en stack valores temprales de suma de las temperaturas
   43  2524 32                pula                    ; y lo metemos en D(A:B) de la formula (h:l)    
   44  2525 33                pulb
   45                         
   46  2526 02                idiv                    ; dividimos la suma por la cantidad de elementos sumados
   47                 
   48  2527 1830              tsy                     ; cargo en y el frame pointer
   49  2529 CDEF02            stx     2,Y             ; cargo en dos bytes el resultado de la suma (se decidieron utilizar dos bytes)
   50                 
   51  252C 39                rts
   52                 
   53                 
   54  2000                   org     MAIN_AREA       
   55  2000 8E3532            lds     #stackp
   56  2003 CC3000            ldd     #TEST_AREA
   57  2006 37                pshb
   58  2007 36                psha
   59  2008 BD2500            jsr     get_aver
   60  200B 32                pula
   61  200C 32                pula                    ; solo nos interesa el primer byte del resultado
   62  200D B73900            staa    RESULT          ; para revisar si anda
   63  2010 3F                swi
   64                 
   65                 
   66  3000                   org     TEST_AREA
   67  3000 17                fcb     23
   68  3001 2B                fcb     43
   69  3002 22                fcb     34
   70  3003 0C                fcb     12
   71  3004 17                fcb     23
   72  3005 FF                fcb     $FF
   73                 
   74                 
   75  3500                   org     STACK_AREA
   76  3500           stack   rmb     50
   77  3532           stackp  equ     * -1
   78                 
   79                 
   80  3532                   END

    Errors:  None          ##########
    Bytes:   68            # ej6tp6 #
    CRC:     C7FB          ##########

